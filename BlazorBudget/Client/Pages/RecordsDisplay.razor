@page "/"
@using BlazorBudget.Shared.Models
@using Blazorise.Charts
@inject HttpClient Http

<div class="row">
    <div class="col-md-6">
        <a href='/record/add' class="btn btn-primary" role="button">
            <i class="fas fa-record-plus"></i>
            Add Record
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search record by name"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterRecord" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />

<table class="table table-striped align-middle table-bordered">
    <thead class="table-success">
    <tr>
        <th>ID</th>
        <th>Date</th>
        <th>Name</th>
        <th>Value</th>
        <th>Category</th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var record in RecordList)
    {
        <tr>
            <td>@record.RecordId</td>
            <td>@record.Date</td>
            <td>@record.Name</td>
            <td>@record.Value.ToString("0.00")</td>
            <td>@record.Category.Name</td>
            <td>
                <a href='/record/edit/@record.RecordId' class="btn btn-outline-dark" role="button">
                    Edit
                </a>
                <a href='/record/delete/@record.RecordId' class="btn btn-outline-danger" role="button">
                    Delete
                </a>
            </td>
        </tr>
    }
    <tr>
        <td>Total</td>
        <td></td>
        <td></td>
        <td>@Count</td>
    </tr>
    </tbody>
</table>

<Button Color="Color.Primary" Clicked="@(async () => await HandleRedraw())">Redraw</Button>

<Chart @ref="barChart" Type="ChartType.Bar" TItem="decimal" />

@code {
    Chart<decimal> barChart;

    //protected override async Task OnAfterRenderAsync( bool firstRender )
    //{
    //    if ( firstRender )
    //    {
    //        await HandleRedraw();
    //    }
    //}

    async Task HandleRedraw()
    {
        await barChart.Clear();

        await barChart.AddLabelsDatasetsAndUpdate( GetNamesList, GetChartDataset() );
    }

    BarChartDataset<decimal> GetChartDataset()
    {
        return new BarChartDataset<decimal>
        {
            Label = "Expenses",
            Data = ValuesList,
            BackgroundColor = backgroundColors,
            BorderColor = borderColors
        };
    }

    List<string> backgroundColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };

    protected List<Record> RecordList = new();
    List<decimal> ValuesList = new();
    string[] GetNamesList = {};
    protected List<Record> SearchRecordData = new();
    protected Record Record = new();
    protected string SearchString { get; set; } = string.Empty;
    protected decimal Count { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetRecord();
        await HandleRedraw();
    }
    protected async Task GetRecord()
    {
        RecordList = await Http.GetFromJsonAsync<List<Record>>("api/Record");
        SearchRecordData = RecordList;
        ValuesList = RecordList.Select(x => x.Value).ToList();
        GetNamesList = RecordList.Select(x => x.Name).ToArray();

        Count = RecordList.Sum(x => x.Value);
    }
    protected void FilterRecord()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            RecordList = SearchRecordData
                .Where(x => x.Name.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
            Count = RecordList.Sum(x => x.Value);
        }
        else
        {
            RecordList = SearchRecordData;
            Count = RecordList.Sum(x => x.Value);
        }
    }
    protected void DeleteConfirm(int RecordId)
    {
        Record = RecordList.FirstOrDefault(x => x.RecordId == RecordId);
    }
    public void ResetSearch()
    {
        SearchString = string.Empty;
        RecordList = SearchRecordData;
    }
}